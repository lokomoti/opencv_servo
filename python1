#import required libraries
import cv2
import time
import serial

###ser = serial.Serial("/dev/tty.wchusbserial1420")  # open serial port
###print(ser.name) # name of opened port

#translate function
def translate(inp, in_min, in_max, out_min, out_max): #scaling function for servos
    return (inp - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

###ser.write("X127Y127") #center servos

#point to the haar cascade file in the directory
cascPath = "haarcascade.xml"
faceCascade = cv2.CascadeClassifier(cascPath)

#start the camera
video_capture = cv2.VideoCapture(0)

#give camera time to warm up
time.sleep(0.1)

ret = video_capture.set(cv2.CAP_PROP_FRAME_WIDTH,640)
ret = video_capture.set(cv2.CAP_PROP_FRAME_HEIGHT,480)

# set offset
minOffset = 40
maxOffset = 40

#text font variable
font = cv2.FONT_HERSHEY_SIMPLEX

#start video frame capture loop
while True:
    # take the frame, convert it to black and white, and look for facial features
    ret, frame = video_capture.read()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # use appropriate flag based on version of OpenCV
    if int(cv2.__version__.split('.')[0]) >= 3:
        cv_flag = cv2.CASCADE_SCALE_IMAGE
    else:
        cv_flag = cv2.cv.CV_HAAR_SCALE_IMAGE

    faces = faceCascade.detectMultiScale(
        gray,
        scaleFactor=1.1,
        minNeighbors=5,
        minSize=(30, 30),
        flags=cv_flag
    )

    #for each face, draw a green rectangle around it and append to the image
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

        #calculate center of X and Y axis and write servo
        servX = translate((x+h/2),0,640,0+minOffset,255-maxOffset) 
        servY = translate((y+w/2),0,480,0+minOffset,255-maxOffset)

 ###       ser.write("X" + str(servX) + "Y" + str(servY))
        #print("X" + str(servX) + "Y" + str(servY))

        #display text    
        cv2.putText(frame,("X" + str(servX) + "Y" + str(servY)),(10,20), font,0.5,(255,0,0),2,cv2.LINE_AA)
        cv2.putText(frame,("W= " + str(w)),(10,35), font,0.5,(255,0,0),2,cv2.LINE_AA)

    
    #display the resulting image
    cv2.imshow('Video', frame)

	#set "q" as the key to exit the program when pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# clear the stream capture
video_capture.release()
cv2.destroyAllWindows()
